[
    {
        "opcodeDec": 0,
        "mnemonic": "nop",
        "description": "Do nothing",
        "args": [],
        "logic": ""
    },
    {
        "opcodeDec": 2,
        "mnemonic": "lmov",
        "description": "mov long to reg (local variable)",
        "args": [
            {
                "type": "LongType"
            },
            {
                "type": "RegType"
            }
        ],
        "logic": "_arg1 = _arg0;"
    },
    {
        "opcodeDec": 3,
        "mnemonic": "rmov",
        "description": "mov reg to reg",
        "args": [
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            }
        ],
        "logic": "_arg1 = _arg0;"
    },
    {
        "opcodeDec": 4,
        "mnemonic": "lmov_return",
        "description": "mov return to register",
        "args": [
            {
                "type": "RegType"
            }
        ],
        "logic": "_arg0 = _rv;"
    },
    {
        "opcodeDec": 97,
        "mnemonic": "ladd",
        "description": "Add two longs",
        "args": [
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            }
        ],
        "logic": "_arg2 = _arg0 + _arg1;"
    },
    {
        "opcodeDec": 101,
        "mnemonic": "lsub",
        "description": "Subtract two longs",
        "args": [
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            }
        ],
        "logic": "_arg2 = _arg0 - _arg1;"
    },
    {
        "opcodeDec": 105,
        "mnemonic": "lmul",
        "description": "Multiply two longs",
        "args": [
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            }
        ],
        "logic": "_arg2 = _arg0 * _arg1;"
    },
    {
        "opcodeDec": 109,
        "mnemonic": "ldiv",
        "description": "Integer division of two longs",
        "args": [
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            }
        ],
        "logic": "if (_arg1 == 0) { throw std::runtime_error(\"Devision by zero!\"); } _arg2 = _arg0 / _arg1;"
    },
    {
        "opcodeDec": 113,
        "mnemonic": "lrem",
        "description": "Remainder of two longs",
        "args": [
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            }
        ],
        "logic": "_arg2 = _arg0 % _arg1;"
    },
    {
        "opcodeDec": 153,
        "mnemonic": "br_licmpeq",
        "description": "Branch if long1 == long2",
        "args": [
            {
                "type": "LongType"
            },
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            }
        ],
        "logic": "if (_arg1 == _arg2) { _ip += _arg0; }"
    },
    {
        "opcodeDec": 154,
        "mnemonic": "br_licmpne",
        "description": "Branch if long1 != long2",
        "args": [
            {
                "type": "LongType"
            },
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            }
        ],
        "logic": "if (_arg1 != _arg2) { _ip += _arg0; }"
    },
    {
        "opcodeDec": 155,
        "mnemonic": "br_licmplt",
        "description": "Branch if long1 < long2",
        "args": [
            {
                "type": "LongType"
            },
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            }
        ],
        "logic": "if (_arg1 < _arg2) { _ip += _arg0; }"
    },
    {
        "opcodeDec": 156,
        "mnemonic": "br_licmpge",
        "description": "Branch if long1 >= long2)",
        "args": [
            {
                "type": "LongType"
            },
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            }
        ],
        "logic": "if (_arg1 >= _arg2) { _ip += _arg0; }"
    },
    {
        "opcodeDec": 157,
        "mnemonic": "br_licmpgt",
        "description": "Branch if long1 > long2",
        "args": [
            {
                "type": "LongType"
            },
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            }
        ],
        "logic": "if (_arg1 > _arg2) { _ip += _arg0; }"
    },
    {
        "opcodeDec": 158,
        "mnemonic": "br_licmple",
        "description": "Branch if long1 <= long2",
        "args": [
            {
                "type": "LongType"
            },
            {
                "type": "RegType"
            },
            {
                "type": "RegType"
            }
        ],
        "logic": "if (_arg1 <= _arg2) { _ip += _arg0; }"
    },
    {
        "opcodeDec": 167,
        "mnemonic": "br",
        "description": "Branch always",
        "args": [
            {
                "type": "LongType"
            }
        ],
        "logic": "_ip += _arg0;"
    },
    {
        "opcodeDec": 253,
        "mnemonic": "lreturn",
        "description": "Return reg value from function",
        "args": [
            {
                "type": "RegType"
            }
        ],
        "logic": "_rv = _arg0; ReturnPreviousFrame();"
    },
    {
        "opcodeDec": 254,
        "mnemonic": "call",
        "description": "Call function",
        "args": [
            {
                "type": "FuncIdType",
                "description": "Function id"
            },
            {
                "type": "ArrayLenType",
                "description": "Number of args"
            },
            {
                "type": "ArrayType",
                "description": "Args array"
            }
        ],
        "logic": "CreateFrame(_arg0, _arg1, _arg2);"
    },
    {
        "opcodeDec": 255,
        "mnemonic": "exit",
        "description": "Exit with exit code from register",
        "args": [
            {
                "type": "RegType"
            }
        ],
        "logic": "_return_code = _arg0;"
    }
]
